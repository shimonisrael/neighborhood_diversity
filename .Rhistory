packageVersion("crsuggest")
install.packages("crsuggest")
library(crsuggest)
mcopa <- tigris::tracts("AZ", "Maricopa", cb = TRUE)
suggest_top_crs(mcopa, inherit_gcs = FALSE)
suggest_top_crs(sf::st_centroid(mcopa), inherit_gcs = FALSE)
# interpolate_data.R
#
# Goal here: adjust race / ethnicity data from 2000 and 2010 to 2020 boundaries
#
# First, get weights for states you'll need
library(tidyverse)
library(tigris)
options(tigris_use_cache = TRUE)
tract_shapes <- read_rds("data/tracts_with_distance.rds")
state_fips <- map(tract_shapes, ~{
unique(str_sub(.x$tract_id, 1, 2))
}) %>%
unlist() %>%
unique()
walk(state_fips, ~{
blocks(state = .x, year = 2000)
blocks(state = .x, year = 2010)
})
# interpolate_data.R
#
# Goal here: adjust race / ethnicity data from 2000 and 2010 to 2020 boundaries
#
# First, get weights for states you'll need
library(tidyverse)
library(tigris)
library(tidycensus)
options(tigris_use_cache = TRUE)
tract_shapes <- read_rds("data/tracts_with_distance.rds")
sf1_00 <- load_variables(2000, "sf1")
View(sf1_00)
library(sf)
sf_use_s2(FALSE)
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {x}..."))
# Retain only the GEOID column
metro_tracts <- select(x, GEOID)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$GEOID, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(GEOID, 1, 2) == y) %>%
pull(GEOID) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE
) %>%
rename(block_id = GEOID) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian),
.fns = ~sum(.x, na.rm = TRUE))
to_2020
})
})
# interpolate_data.R
#
# Goal here: adjust race / ethnicity data from 2000 and 2010 to 2020 boundaries
#
# First, get weights for states you'll need
library(tidyverse)
library(tigris)
library(tidycensus)
library(sf)
sf_use_s2(FALSE)
options(tigris_use_cache = TRUE)
tract_shapes <- read_rds("data/tracts_with_distance.rds")
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {unique(x$metro_id)}..."))
# Retain only the GEOID column
metro_tracts <- select(x, GEOID)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$GEOID, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(tract_id, 1, 2) == y) %>%
pull(tract_id) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE
) %>%
rename(block_id = GEOID) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian),
.fns = ~sum(.x, na.rm = TRUE))
to_2020
})
})
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {unique(x$metro_id)}..."))
# Retain only the GEOID column
metro_tracts <- select(x, tract_id)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$GEOID, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(tract_id, 1, 2) == y) %>%
pull(tract_id) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE
) %>%
rename(block_id = GEOID) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian),
.fns = ~sum(.x, na.rm = TRUE))
to_2020
})
})
race00$`16980`
tract_shapes$`16980`
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {unique(x$metro_id)}..."))
# Retain only the GEOID column
metro_tracts <- select(x, tract_id)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$tract_id, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(tract_id, 1, 2) == y) %>%
pull(tract_id) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE
) %>%
rename(block_id = GEOID) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian),
.fns = ~sum(.x, na.rm = TRUE))
to_2020
})
block_centroids
})
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {unique(x$metro_id)}..."))
# Retain only the GEOID column
metro_tracts <- select(x, tract_id)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$tract_id, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(tract_id, 1, 2) == y) %>%
pull(tract_id) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE
) %>%
rename(block_id = GEOID) %>%
st_transform(st_crs(metro_tracts)) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian),
.fns = ~sum(.x, na.rm = TRUE))
to_2020
})
block_centroids
})
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {unique(x$metro_id)}..."))
# Retain only the GEOID column
metro_tracts <- select(x, tract_id)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$tract_id, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(tract_id, 1, 2) == y) %>%
pull(tract_id) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE,
output = "wide"
) %>%
rename(block_id = GEOID) %>%
st_transform(st_crs(metro_tracts)) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian),
.fns = ~sum(.x, na.rm = TRUE))
to_2020
})
block_centroids
})
race00 <- map(tract_shapes, function(x) {
print(glue::glue("Working on {unique(x$metro_id)}..."))
# Retain only the GEOID column
metro_tracts <- select(x, tract_id)
# Find the state / county combos you need
state_codes <- unique(str_sub(metro_tracts$tract_id, 1, 2))
block_centroids <- map_dfr(state_codes, function(y) {
county_codes <- metro_tracts %>%
filter(str_sub(tract_id, 1, 2) == y) %>%
pull(tract_id) %>%
str_sub(3, 5) %>%
unique()
block_data <- get_decennial(
geography = "block",
variables = c(
Hispanic = "P004002",
White = "P004005",
Black = "P004006",
Asian = "P004008"
),
year = 2000,
state = y,
county = county_codes,
geometry = TRUE,
output = "wide"
) %>%
rename(block_id = GEOID) %>%
st_transform(st_crs(metro_tracts)) %>%
st_centroid()
to_2020 <- metro_tracts %>%
st_join(block_data) %>%
st_drop_geometry() %>%
group_by(tract_id) %>%
summarize(across(Hispanic:Asian,
.fns = ~sum(.x, na.rm = TRUE)))
to_2020
})
block_centroids
})
library(tidyverse)
nhgis <- read_csv("data/nhgis0104_csv/nhgis0104_csv/nhgis0104_ts_geog2010_tract.csv")
glimpse(nhgis)
# get_tracts_and_distances.R
#' Steps:
#' 1. Grab all US tracts and transform to an equidistant CRS
#' 2. Find the top 50 metros by population
library(tidyverse)
library(sf)
library(tigris)
options(tigris_use_cache = TRUE)
city_halls <- read_csv("data/city_halls.csv")
us_tracts <- tracts(cb = TRUE, year = 2019) %>%
st_transform('ESRI:102005')
metros <- core_based_statistical_areas(cb = TRUE, year = 2020) %>%
select(metro_id = GEOID) %>%
filter(metro_id %in% as.character(city_halls$metro_id)) %>%
st_transform('ESRI:102005')
metro_tracts <- us_tracts %>%
select(tract_id = GEOID) %>%
st_join(metros, join = st_within, left = FALSE)
metro_ids <- unique(metros$metro_id)
names(metro_ids) <- metro_ids
# Iterate through the metros and calculate distances
tracts_with_distance <- map(metro_ids, ~{
halls <- filter(city_halls, metro_id == .x) %>%
st_as_sf(coords = c("X", "Y"), crs = 4326) %>%
st_transform(st_crs(metros))
local_tracts <- filter(metro_tracts, metro_id == .x)
tract_distances <- local_tracts %>%
st_distance(halls, by_element = FALSE) %>%
apply(1, min)
local_tracts$distance <- tract_distances
local_tracts$distmiles <- local_tracts$distance * 0.000621371
local_tracts
})
write_rds(tracts_with_distance, "data/tracts_with_distance.rds")
